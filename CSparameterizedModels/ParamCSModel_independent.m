function [response, modelComponents] = ParamCSModel_independent(centerStimulus,surroundStimulus,centerFilterParams,surroundFilterParams,centerNLParams,surroundNLParams)

% Linear filters:
filterTimeVector = linspace(0,1,1e3);
centerFilter = ParameterizedLinearFilter(filterTimeVector,...
    'NumFilters',centerFilterParams.NumFilters,...
    'TauRise',centerFilterParams.TauRise,...
    'TauDamp',centerFilterParams.TauDamp,...
    'Period',centerFilterParams.Period,...
    'Phase',centerFilterParams.Phase,...
    'ScaleFactor',centerFilterParams.ScaleFactor);
surroundFilter = ParameterizedLinearFilter(filterTimeVector,...
    'NumFilters',surroundFilterParams.NumFilters,...
    'TauRise',surroundFilterParams.TauRise,...
    'TauDamp',surroundFilterParams.TauDamp,...
    'Period',surroundFilterParams.Period,...
    'Phase',surroundFilterParams.Phase,...
    'ScaleFactor',surroundFilterParams.ScaleFactor);

% Linear predictions in center & surround channels:
LinearCenterResponse = conv(centerStimulus, centerFilter);
LinearCenterResponse = LinearCenterResponse(1:length(centerStimulus));

LinearSurroundResponse = conv(surroundStimulus, surroundFilter);
LinearSurroundResponse = LinearSurroundResponse(1:length(surroundStimulus));

% Nonlinearly transformed C & S responses:
NonlinearCenterResponse = ParameterizedNonlinearity(LinearCenterResponse,...
    'alphaScale',centerNLParams.alphaScale,...
    'betaSens',centerNLParams.betaSens,...
    'gammaXoffset',centerNLParams.gammaXoffset,...
    'epsilonYoffset',centerNLParams.epsilonYoffset);

NonlinearSurroundResponse = ParameterizedNonlinearity(LinearSurroundResponse,...
    'alphaScale',surroundNLParams.alphaScale,...
    'betaSens',surroundNLParams.betaSens,...
    'gammaXoffset',surroundNLParams.gammaXoffset,...
    'epsilonYoffset',surroundNLParams.epsilonYoffset);

% Cell response:
response = NonlinearCenterResponse + NonlinearSurroundResponse;

% Save out model components:
modelComponents.filterTimeVector = filterTimeVector;
modelComponents.centerFilter = centerFilter;
modelComponents.surroundFilter = surroundFilter;
end